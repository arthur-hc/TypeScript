*** Encapsulamento
Em JS # é utilizado para encapsular propriedades

Para TS é utilizado o private

Caso deseje que ele possa ser visualizado, mas não alterado, utilize readonly

Quando não há nenhuma das modalidades é a atribuida a classe, assume-se o formato public que pode ser omitido

*** Getters
Definir um método getter

get Xablau() {
  return this.#Xablau
}

*** Modo Watch e compilando com mudanças
> No script a seguir: qualquer mudança, provoca uma re-compilação e starta o server novamente
(Nos scripts do package.json)
scripts: {
  ...,
  "server": "lite-server --baseDir=dist",
  "start": "concurrently \"npm run watch\" \"npm run server\"",
  "watch": "tsc -w"
}

*** Evitando compilações com erro e não aceitando any implicito
(Em tsconfig)
{
  "compilerOptions": {
    ...,
    "noEmitOnError": true,
    "noImplicitAny": true
  }
}

*** Generics
Array de negociações:
private negociations: Negociation[] = []

*** Evitando mutabilidade
Ao trazer o dado da instância diretamente, ele poderá ser modificado.
No caso do array, para permitir mudanças mas sem alterar a fonte, poderá ser usado uma cópia do original com spread
[...this.negociations]

Caso queira que seja o mesmo dado, utilizar o readonly Negociation[]

*** Retirando a necessidade de Getters
Tranforma a propriedades em public mas adiciona o readonly, assim, ele poderá ser retornado sem um getter, mas não permitindo edição

*** Programação defensiva
Em casos como Date, readonly não evita a edição devido ao setDate. Assim é necessário tornar a propriedade privada e retornar apenas a sua cópia

*** Protected
Caso queira que a propriedade seja acessivel por classes filhas, utilize protected no lugar de private. Assim, a classe filha poderá acessar a propriedade, mas não alterá-la. Também não poderá ser alterada por outra classe.

*** Utilizando tipo genéricos <T>
Dessa forma, podemos fazer a tipagem dinâmicamente. Exemplo:
O método update herdado por negociations-view de views.ts receberá como parâmetros negociations, já message-view receberá como parâmetros uma string.
Dessa forma, ao realizar o extends, devemos especificar o tipo utilizado na classe herdada antes definida com Generics <T>

*** Método abstrato
Método abstrato é um método que não possui implementação. Ele é herdado e implementado por outra classe filha. Caso não seja implementado, dará erro de compilação. No exemplo, template é um método abstrato que deve ser implementado pelas filhas de view.ts, de acordo com a sua necessidade de implementação.

*** Protected para filhas
Ao colocar na classe pai, e também nas filhas, o método poderá ser utilizado internamente, mas não acessado. Assim, após a instância, não poderá ser executado.

*** Métodos estáticos
Permitem acessar a função sem a necessidade de instânciar a classe. No exemplo, será possível o método create sem instanciar a classe negociation.

*** Parâmetros Opcionais
Para declarar parâmetros opcionais no método, utilize o ?
Ex: escape?: boolean

*** StrictNullChecks
Se ativada como true no tsconfig, o TS passa não aceitar null ou undefined como possíveis retornos. Assim, o desenvolver precisa fazer um casting (transformação do retorno).
- this.inputDate = <HTMLInputElement>document.querySelector('#data');
OU
- this.inputDate = <HTMLInputElement>document.querySelector('#data') as HTMLInputElement;

> Neste caso, "obrigamos" o ts a aceitar, mas para outras situações, é indicado tratar essa possíbilidade. O Próprio TS entende que está sendo verificado se o retorno não é null.
const form = document.querySelector('.form');
if (form) {
  form.addEventListener('submit', (event: Event) => {
    event.preventDefault();
    controller.add();
  });
}


*** Decorators
Decorators são funções que são utilizadas para modificar o comportamento de uma classe ou método. No exemplo, o método add é executado da mesma forma, mas passa a exibir o tempo de execução devido ao acréscimo do decorator.
  => Para seu funcionamento, é preciso adicionar "experimentalDecorators": true no tsconfig.json

*** Ordem dos decorators
A ordem de execução é por posição, ou seja, o primeiro decorator é executado primeiro. Contudo, espeará primeiro os internos terminarem a execução e em seguida retornar até chegar na última camada de funções. Exemplo:
- Executa inspect
- Executa log
- Executa decorada
- Retorna decorada
- Retorna log com o valor da decordada
- Retorna inspect com o valor de log

*** Decorators sem parâmetros
CASO O DECORATOR NÃO RECEBA PARAMETROS, ELE PODE SER DIRETAMENTE USADO SOBRE A FUNÇÃO e para sua chamada basta apenas @<nomeDoDecorator>

*** Decorators para propriedades não estáticas
Será necessárias acessá-las através de um getter. Para adicionar um getter da propriedade, utilize Object.defineProperty(target, propertyKey, { get: getter });

*** Interfaces
Interfaces são usadas para definir o tipo de um objeto. No exemplo, a interface Negociation define o tipo de um objeto que representa uma negociação.